// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Um agente de IA para verificar a identidade de um usuário contra dados biométricos registrados.
 *
 * - verifyIdentity - Uma função que lida com o processo de verificação de identidade.
 * - VerifyIdentityInput - O tipo de entrada para a função verifyIdentity.
 * - VerifyIdentityOutput - O tipo de retorno para a função verifyIdentity.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const VerifyIdentityInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "Uma foto do usuário, como uma URI de dados que deve incluir um tipo MIME e usar codificação Base64. Formato esperado: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  employeeId: z.string().describe('A matrícula do funcionário.'),
});
export type VerifyIdentityInput = z.infer<typeof VerifyIdentityInputSchema>;

const VerifyIdentityOutputSchema = z.object({
  isVerified: z.boolean().describe('Se o usuário foi verificado ou não.'),
  confidence: z.number().describe('O nível de confiança da verificação.'),
  possibleAlternatives: z
    .array(z.string())
    .describe('Possíveis matrículas alternativas se a verificação falhar.'),
});
export type VerifyIdentityOutput = z.infer<typeof VerifyIdentityOutputSchema>;

export async function verifyIdentity(input: VerifyIdentityInput): Promise<VerifyIdentityOutput> {
  return verifyIdentityFlow(input);
}

const prompt = ai.definePrompt({
  name: 'verifyIdentityPrompt',
  input: {schema: VerifyIdentityInputSchema},
  output: {schema: VerifyIdentityOutputSchema},
  prompt: `Você é um assistente de segurança de IA especializado em verificar identidades de usuários.

Você receberá uma foto de um usuário e sua matrícula. Você comparará a foto com os dados biométricos registrados para essa matrícula.

Com base em sua análise, determine se o usuário foi verificado ou não. Forneça um nível de confiança para sua verificação.

Se a verificação falhar, forneça uma lista de possíveis matrículas alternativas.

Foto: {{media url=photoDataUri}}
Matrícula: {{{employeeId}}}`,
});

const verifyIdentityFlow = ai.defineFlow(
  {
    name: 'verifyIdentityFlow',
    inputSchema: VerifyIdentityInputSchema,
    outputSchema: VerifyIdentityOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
