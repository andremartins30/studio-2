// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview An AI agent to verify a user's identity against registered biometric data.
 *
 * - verifyIdentity - A function that handles the identity verification process.
 * - VerifyIdentityInput - The input type for the verifyIdentity function.
 * - VerifyIdentityOutput - The return type for the verifyIdentity function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const VerifyIdentityInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo of the user, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  employeeId: z.string().describe('The employee ID of the user.'),
});
export type VerifyIdentityInput = z.infer<typeof VerifyIdentityInputSchema>;

const VerifyIdentityOutputSchema = z.object({
  isVerified: z.boolean().describe('Whether the user is verified or not.'),
  confidence: z.number().describe('The confidence level of the verification.'),
  possibleAlternatives: z
    .array(z.string())
    .describe('Possible alternative employee IDs if verification fails.'),
});
export type VerifyIdentityOutput = z.infer<typeof VerifyIdentityOutputSchema>;

export async function verifyIdentity(input: VerifyIdentityInput): Promise<VerifyIdentityOutput> {
  return verifyIdentityFlow(input);
}

const prompt = ai.definePrompt({
  name: 'verifyIdentityPrompt',
  input: {schema: VerifyIdentityInputSchema},
  output: {schema: VerifyIdentityOutputSchema},
  prompt: `You are an AI security assistant specializing in verifying user identities.

You will receive a photo of a user and their employee ID. You will compare the photo against the registered biometric data for that employee ID.

Based on your analysis, determine whether the user is verified or not. Provide a confidence level for your verification.

If the verification fails, provide a list of possible alternative employee IDs.

Photo: {{media url=photoDataUri}}
Employee ID: {{{employeeId}}}`,
});

const verifyIdentityFlow = ai.defineFlow(
  {
    name: 'verifyIdentityFlow',
    inputSchema: VerifyIdentityInputSchema,
    outputSchema: VerifyIdentityOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
