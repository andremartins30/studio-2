const WizardService = require('../services/wizard.service');

/**
 * Controller para gerenciar endpoints das a√ß√µes do wizard EPI
 */
class WizardController {

    /**
     * === FORNECIMENTO/EMPR√âSTIMO ===
     */

    /**
     * Realiza fornecimento de EPIs
     * POST /api/wizard/fornecimento
     */
    static async fornecerEpis(req, res) {
        try {
            console.log('üì• Controller: Fornecimento de EPIs');

            const { chapa, epis, observacao } = req.body;

            // Validar dados obrigat√≥rios
            if (!chapa) {
                return res.status(400).json({
                    success: false,
                    error: 'Par√¢metro obrigat√≥rio',
                    message: 'Chapa do funcion√°rio √© obrigat√≥ria'
                });
            }

            if (!epis || !Array.isArray(epis) || epis.length === 0) {
                return res.status(400).json({
                    success: false,
                    error: 'Par√¢metro obrigat√≥rio',
                    message: 'Lista de EPIs √© obrigat√≥ria e deve conter pelo menos um item'
                });
            }

            const result = await WizardService.fornecerEpis({
                chapa,
                epis,
                observacao
            });

            const statusCode = result.success ? 200 : 207; // 207 Multi-Status para erros parciais
            res.status(statusCode).json(result);

        } catch (error) {
            console.error('‚ùå Erro no controller de fornecimento:', error.message);

            res.status(500).json({
                success: false,
                error: 'Erro interno do servidor',
                message: error.message,
                acao: 'fornecimento'
            });
        }
    }

    /**
     * === DEVOLU√á√ÉO ===
     */

    /**
     * Realiza devolu√ß√£o de EPIs
     * POST /api/wizard/devolucao
     */
    static async devolverEpis(req, res) {
        try {
            console.log('üì• Controller: Devolu√ß√£o de EPIs');

            const { chapa, epis, motivo } = req.body;

            // Validar dados obrigat√≥rios
            if (!chapa) {
                return res.status(400).json({
                    success: false,
                    error: 'Par√¢metro obrigat√≥rio',
                    message: 'Chapa do funcion√°rio √© obrigat√≥ria'
                });
            }

            if (!epis || !Array.isArray(epis) || epis.length === 0) {
                return res.status(400).json({
                    success: false,
                    error: 'Par√¢metro obrigat√≥rio',
                    message: 'Lista de EPIs √© obrigat√≥ria e deve conter pelo menos um item'
                });
            }

            const result = await WizardService.devolverEpis({
                chapa,
                epis,
                motivo
            });

            const statusCode = result.success ? 200 : 207; // 207 Multi-Status para erros parciais
            res.status(statusCode).json(result);

        } catch (error) {
            console.error('‚ùå Erro no controller de devolu√ß√£o:', error.message);

            res.status(500).json({
                success: false,
                error: 'Erro interno do servidor',
                message: error.message,
                acao: 'devolucao'
            });
        }
    }

    /**
     * === DESCARTE ===
     */

    /**
     * Realiza descarte de EPIs
     * POST /api/wizard/descarte
     */
    static async descartarEpis(req, res) {
        try {
            console.log('üì• Controller: Descarte de EPIs');

            const { chapa, epis, motivo } = req.body;

            // Validar dados obrigat√≥rios
            if (!chapa) {
                return res.status(400).json({
                    success: false,
                    error: 'Par√¢metro obrigat√≥rio',
                    message: 'Chapa do funcion√°rio √© obrigat√≥ria'
                });
            }

            if (!epis || !Array.isArray(epis) || epis.length === 0) {
                return res.status(400).json({
                    success: false,
                    error: 'Par√¢metro obrigat√≥rio',
                    message: 'Lista de EPIs √© obrigat√≥ria e deve conter pelo menos um item'
                });
            }

            if (!motivo) {
                return res.status(400).json({
                    success: false,
                    error: 'Par√¢metro obrigat√≥rio',
                    message: 'Motivo do descarte √© obrigat√≥rio'
                });
            }

            const result = await WizardService.descartarEpis({
                chapa,
                epis,
                motivo
            });

            const statusCode = result.success ? 200 : 207; // 207 Multi-Status para erros parciais
            res.status(statusCode).json(result);

        } catch (error) {
            console.error('‚ùå Erro no controller de descarte:', error.message);

            res.status(500).json({
                success: false,
                error: 'Erro interno do servidor',
                message: error.message,
                acao: 'descarte'
            });
        }
    }

    /**
     * === CANCELAMENTO ===
     */

    /**
     * Realiza cancelamento de EPIs
     * POST /api/wizard/cancelamento
     */
    static async cancelarEpis(req, res) {
        try {
            console.log('üì• Controller: Cancelamento de EPIs');

            const { chapa, epis, motivo } = req.body;

            // Validar dados obrigat√≥rios
            if (!chapa) {
                return res.status(400).json({
                    success: false,
                    error: 'Par√¢metro obrigat√≥rio',
                    message: 'Chapa do funcion√°rio √© obrigat√≥ria'
                });
            }

            if (!epis || !Array.isArray(epis) || epis.length === 0) {
                return res.status(400).json({
                    success: false,
                    error: 'Par√¢metro obrigat√≥rio',
                    message: 'Lista de EPIs √© obrigat√≥ria e deve conter pelo menos um item'
                });
            }

            const result = await WizardService.cancelarEpis({
                chapa,
                epis,
                motivo
            });

            const statusCode = result.success ? 200 : 207; // 207 Multi-Status para erros parciais
            res.status(statusCode).json(result);

        } catch (error) {
            console.error('‚ùå Erro no controller de cancelamento:', error.message);

            res.status(500).json({
                success: false,
                error: 'Erro interno do servidor',
                message: error.message,
                acao: 'cancelamento'
            });
        }
    }

    /**
     * === CONSULTAS AUXILIARES ===
     */

    /**
     * Busca EPIs emprestados de um funcion√°rio
     * GET /api/wizard/emprestimos/:chapa
     */
    static async buscarEpisEmprestados(req, res) {
        try {
            const { chapa } = req.params;

            console.log(`üì• Controller: Buscando EPIs emprestados - ${chapa}`);

            if (!chapa) {
                return res.status(400).json({
                    success: false,
                    error: 'Par√¢metro obrigat√≥rio',
                    message: 'Chapa do funcion√°rio √© obrigat√≥ria'
                });
            }

            const result = await WizardService.buscarEpisEmprestados(chapa);

            res.status(200).json(result);

        } catch (error) {
            console.error('‚ùå Erro no controller ao buscar EPIs emprestados:', error.message);

            res.status(500).json({
                success: false,
                error: 'Erro interno do servidor',
                message: error.message,
                tipo: 'emprestimos-funcionario'
            });
        }
    }

    /**
     * Busca hist√≥rico de um EPI
     * GET /api/wizard/historico/:codepi
     */
    static async buscarHistoricoEpi(req, res) {
        try {
            const { codepi } = req.params;

            console.log(`üì• Controller: Buscando hist√≥rico do EPI - ${codepi}`);

            if (!codepi) {
                return res.status(400).json({
                    success: false,
                    error: 'Par√¢metro obrigat√≥rio',
                    message: 'C√≥digo do EPI √© obrigat√≥rio'
                });
            }

            const result = await WizardService.buscarHistoricoEpi(codepi);

            res.status(200).json(result);

        } catch (error) {
            console.error('‚ùå Erro no controller ao buscar hist√≥rico do EPI:', error.message);

            res.status(500).json({
                success: false,
                error: 'Erro interno do servidor',
                message: error.message,
                tipo: 'historico-epi'
            });
        }
    }

    /**
     * Valida disponibilidade de um EPI
     * GET /api/wizard/validar/:codepi?quantidade=1
     */
    static async validarDisponibilidadeEpi(req, res) {
        try {
            const { codepi } = req.params;
            const quantidade = parseInt(req.query.quantidade) || 1;

            console.log(`üì• Controller: Validando disponibilidade do EPI - ${codepi}`);

            if (!codepi) {
                return res.status(400).json({
                    success: false,
                    error: 'Par√¢metro obrigat√≥rio',
                    message: 'C√≥digo do EPI √© obrigat√≥rio'
                });
            }

            if (quantidade <= 0) {
                return res.status(400).json({
                    success: false,
                    error: 'Par√¢metro inv√°lido',
                    message: 'Quantidade deve ser maior que zero'
                });
            }

            const result = await WizardService.validarDisponibilidadeEpi(codepi, quantidade);

            res.status(200).json(result);

        } catch (error) {
            console.error('‚ùå Erro no controller ao validar disponibilidade:', error.message);

            res.status(500).json({
                success: false,
                error: 'Erro interno do servidor',
                message: error.message,
                tipo: 'validacao-disponibilidade'
            });
        }
    }

    /**
     * === ENDPOINTS DE CONFIGURA√á√ÉO ===
     */

    /**
     * Obt√©m motivos de descarte
     * GET /api/wizard/motivos-descarte
     */
    static async getMotivosDescarte(req, res) {
        try {
            console.log('üì• Controller: Buscando motivos de descarte');

            const result = WizardService.getMotivosDescarte();

            res.status(200).json(result);

        } catch (error) {
            console.error('‚ùå Erro no controller ao buscar motivos de descarte:', error.message);

            res.status(500).json({
                success: false,
                error: 'Erro interno do servidor',
                message: error.message,
                tipo: 'motivos-descarte'
            });
        }
    }

    /**
     * Obt√©m tipos de status
     * GET /api/wizard/status-types
     */
    static async getStatusTypes(req, res) {
        try {
            console.log('üì• Controller: Buscando tipos de status');

            const result = WizardService.getStatusTypes();

            res.status(200).json(result);

        } catch (error) {
            console.error('‚ùå Erro no controller ao buscar tipos de status:', error.message);

            res.status(500).json({
                success: false,
                error: 'Erro interno do servidor',
                message: error.message,
                tipo: 'status-types'
            });
        }
    }

    /**
     * Obt√©m a√ß√µes do wizard
     * GET /api/wizard/actions
     */
    static async getWizardActions(req, res) {
        try {
            console.log('üì• Controller: Buscando a√ß√µes do wizard');

            const result = WizardService.getWizardActions();

            res.status(200).json(result);

        } catch (error) {
            console.error('‚ùå Erro no controller ao buscar a√ß√µes do wizard:', error.message);

            res.status(500).json({
                success: false,
                error: 'Erro interno do servidor',
                message: error.message,
                tipo: 'wizard-actions'
            });
        }
    }

    /**
     * Obt√©m informa√ß√µes gerais do wizard
     * GET /api/wizard/info
     */
    static async getWizardInfo(req, res) {
        try {
            console.log('üì• Controller: Buscando informa√ß√µes do wizard');

            const actions = WizardService.getWizardActions();
            const status = WizardService.getStatusTypes();
            const motivos = WizardService.getMotivosDescarte();

            res.status(200).json({
                success: true,
                wizard: {
                    version: '2.0.0',
                    description: 'Sistema de gest√£o de EPIs - A√ß√µes do Wizard',
                    actions: actions.actions,
                    statusTypes: status.status,
                    motivosDescarte: motivos.motivos
                },
                endpoints: {
                    fornecimento: 'POST /api/wizard/fornecimento',
                    devolucao: 'POST /api/wizard/devolucao',
                    descarte: 'POST /api/wizard/descarte',
                    cancelamento: 'POST /api/wizard/cancelamento',
                    emprestimos: 'GET /api/wizard/emprestimos/:chapa',
                    historico: 'GET /api/wizard/historico/:codepi',
                    validacao: 'GET /api/wizard/validar/:codepi'
                }
            });

        } catch (error) {
            console.error('‚ùå Erro no controller ao buscar informa√ß√µes do wizard:', error.message);

            res.status(500).json({
                success: false,
                error: 'Erro interno do servidor',
                message: error.message,
                tipo: 'wizard-info'
            });
        }
    }
}

module.exports = WizardController; 