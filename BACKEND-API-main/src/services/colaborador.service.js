const SoapClient = require('../utils/soap-client');
const { soapQueries, defaultParameters } = require('../config/soap');

/**
 * Servi√ßo para gerenciar colaboradores
 */
class ColaboradorService {

    /**
     * Busca todos os colaboradores
     * @param {Object} filters - Filtros opcionais
     * @returns {Promise<Object>} Lista de colaboradores
     */
    static async buscarColaboradores(filters = {}) {
        try {
            console.log('üë• Buscando colaboradores...');

            // Construir par√¢metros baseado nos filtros
            let parameters = defaultParameters.COLABORADORES;

            if (filters.coligada) {
                parameters = `COLIGADA=${filters.coligada}`;
            }

            const result = await SoapClient.executeQuery(
                soapQueries.COLABORADORES,
                '0',
                'V',
                parameters
            );

            if (!result.success) {
                throw new Error('Falha ao consultar colaboradores');
            }

            return {
                success: true,
                totalColaboradores: result.total,
                colaboradores: result.data
            };

        } catch (error) {
            console.error('‚ùå Erro no servi√ßo de colaboradores:', error.message);
            throw error;
        }
    }

    /**
     * Busca um colaborador espec√≠fico por chapa
     * @param {string} chapa - Chapa do colaborador
     * @returns {Promise<Object>} Dados do colaborador
     */
    static async buscarColaboradorPorChapa(chapa) {
        try {
            console.log(`üë§ Buscando colaborador por chapa: ${chapa}`);

            const parameters = `COLIGADA=1; CHAPA=${chapa}`;

            const result = await SoapClient.executeQuery(
                soapQueries.COLABORADORES,
                '0',
                'V',
                parameters
            );

            if (!result.success || result.data.length === 0) {
                return {
                    success: false,
                    message: 'Colaborador n√£o encontrado'
                };
            }

            return {
                success: true,
                colaborador: result.data[0]
            };

        } catch (error) {
            console.error('‚ùå Erro ao buscar colaborador por chapa:', error.message);
            throw error;
        }
    }

    /**
     * Valida se um colaborador existe e est√° ativo
     * @param {string} chapa - Chapa do colaborador
     * @returns {Promise<boolean>} True se colaborador existe e est√° ativo
     */
    static async validarColaborador(chapa) {
        try {
            const result = await this.buscarColaboradorPorChapa(chapa);

            if (!result.success) {
                return false;
            }

            // Verificar se o colaborador est√° ativo (se campo existir)
            const colaborador = result.colaborador;
            if (colaborador.ATIVO !== undefined) {
                return colaborador.ATIVO === true || colaborador.ATIVO === '1' || colaborador.ATIVO === 'S';
            }

            // Se n√£o h√° campo ATIVO, considerar como ativo
            return true;

        } catch (error) {
            console.error('‚ùå Erro ao validar colaborador:', error.message);
            return false;
        }
    }

    /**
     * Busca colaboradores por fun√ß√£o
     * @param {string} codFuncao - C√≥digo da fun√ß√£o
     * @returns {Promise<Object>} Lista de colaboradores da fun√ß√£o
     */
    static async buscarColaboradoresPorFuncao(codFuncao) {
        try {
            console.log(`üîç Buscando colaboradores da fun√ß√£o: ${codFuncao}`);

            const parameters = `COLIGADA=1; CODFUNCAO=${codFuncao}`;

            const result = await SoapClient.executeQuery(
                soapQueries.COLABORADORES,
                '0',
                'V',
                parameters
            );

            if (!result.success) {
                throw new Error('Falha ao consultar colaboradores por fun√ß√£o');
            }

            return {
                success: true,
                totalColaboradores: result.total,
                colaboradores: result.data,
                codigoFuncao: codFuncao
            };

        } catch (error) {
            console.error('‚ùå Erro ao buscar colaboradores por fun√ß√£o:', error.message);
            throw error;
        }
    }

    /**
     * Busca colaboradores por se√ß√£o
     * @param {string} codSecao - C√≥digo da se√ß√£o
     * @returns {Promise<Object>} Lista de colaboradores da se√ß√£o
     */
    static async buscarColaboradoresPorSecao(codSecao) {
        try {
            console.log(`üè¢ Buscando colaboradores da se√ß√£o: ${codSecao}`);

            const parameters = `COLIGADA=1; CODSECAO=${codSecao}`;

            const result = await SoapClient.executeQuery(
                soapQueries.COLABORADORES,
                '0',
                'V',
                parameters
            );

            if (!result.success) {
                throw new Error('Falha ao consultar colaboradores por se√ß√£o');
            }

            return {
                success: true,
                totalColaboradores: result.total,
                colaboradores: result.data,
                codigoSecao: codSecao
            };

        } catch (error) {
            console.error('‚ùå Erro ao buscar colaboradores por se√ß√£o:', error.message);
            throw error;
        }
    }
}

module.exports = ColaboradorService; 